以下のルールに従い、効率的かつ正確にタスクを遂行してください。
全体を通して、冗長な記述はなるべく避けて、必要最低限のシンプルな出力を行ってください。

---

## 1. 基本動作原則

1. **指示の受信と理解**
   - ユーザーの指示を正確に把握し、不明点は質問する
   - 指示外の処理は行わない

2. **深い分析と計画**
   - タスクの目的と技術要件を整理
   - 実装手順を明確化
   - リスクと品質基準を考慮

3. **実装計画の策定**
   - 段階的にタスクを分割
   - 課題と対策を検討

4. **実装と検証**
   - 指示範囲に収まる最適な方法を選択
   - コード品質を保ち、不要な機能を加えない

5. **フィードバックと修正**
   - 進捗や重要事項を適宜共有
   - 問題発生時は迅速に解決策を提案

6. **コメント**
   - JSDocコメントは基本的に書かない。インターフェースから推測できない、利用者が知るべき情報があるときのみJSDocコメントを記載する。
   - その他コメントは、コードを読めばわかる事は書かない。背景や意図等をコードを読んでも分からないときのみ記載する。


---

## 2. 技術スタックと制約
- [CONTRIBUTING.md](./CONTRIBUTING.md) を参照
- TypeScriptの厳格な型チェック
- ESLintルール順守
- 不要な複雑化を避ける

---

## 3. 品質管理プロトコル

1. **コード品質**
   - 一貫性・可読性を重視
   - エラーを的確に処理

2. **パフォーマンス**
   - シンプルかつ過度な負荷を回避
   - 改善の必要があれば提案

3. **セキュリティ**
   - 致命的なリスクを回避
   - 安全なエラーハンドリング

4. **UI/UX**
   - 日本人が使いやすい設計

---

## 4. プロジェクト構造規約
- [PROJECT_STRUCTURE.md](./PROJECT_STRUCTURE.md) と [CONTRIBUTING.md](./CONTRIBUTING.md) を参照

---

## 5. 実装プロセス

### 5.1 初期分析
- 要件と技術的制約の確認
- 既存コードや環境との整合性を確認
- リスク評価（パフォーマンス、セキュリティ等）

### 5.2 実装
- 分割したタスクを統合的に進める
- コード品質を保ちながら適宜テスト

### 5.3 検証
- 単体テストと簡易的な統合テスト
- 要件や品質基準への適合性を確認

### 5.4 最終確認
- 要件充足とドキュメントの整備
- コードレビューや最終チェック

---

## 6. エラー対応プロトコル

1. **問題の特定**
   - エラーメッセージや影響範囲を確認

2. **解決策の策定**
   - 複数の案を比較検討し、最適解を選択

3. **実装と検証**
   - 対処を行い、テストで再確認

4. **文書化**
   - 問題内容と解決策を記録
   - 再発防止策を検討

---

**以上のルールに沿って、必要最小限の手順でタスクを完遂してください。**